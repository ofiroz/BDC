import cv2
import glob

'''
Calculating the IOU using the files generated by hand/ auto with the cascade

IOU Formula:  iou = unionArea/ (gtArea + predArea - unionArea)
* gt = ground-truth - the hand selected ROI samples
* pred = predicted - the predicted ROI 
'''


# generic func that returns a list with all requested files
# no need to check the input - internal use only
def append_to_list(path):
    my_list = []
    my_path = glob.glob(path)

    for i in my_path:
        my_list.append(i)

    return my_list


# gets a file path and parse all the lines to 3 variables. every vars/ line appended to a list
def file_to_list(path):
    my_list = []

    # open the file and append every line separately to the list 'lines'
    with open(path) as fp:
        lines = fp.read().splitlines()

    # append to 'my_list' 4 vars at a time (whole line)
    for line in lines:
        x, y, w, h = line.split()
        # a, b, c = lines[4][0], lines[4][2], lines[4][4]  # also optional
        # d, e, f = lines[4].split()  # also optional
        var = x, y, w, h
        my_list.append(var)
    return my_list


def calc():
    test_name_list = append_to_list('./Testing_samples/*.jpg')
    gt_list = file_to_list('./Files/byHand_info.txt')
    pred_list = file_to_list('./Files/auto_info.txt')

    iou_list = []  # calc average with it

    unionArea = None

    # rectangle both roi's and calc the iou
    for (name, gt, pred) in zip(test_name_list, gt_list, pred_list):
        # print(idx, name, gt_xywh, pred_xywh)

        pic = cv2.imread(name)

        a1, a2, a3, a4 = gt
        gt_x, gt_y, gt_w, gt_h = float(a1), float(a2), float(a3), float(a4)

        b1, b2, b3, b4 = pred
        pred_x, pred_y, pred_w, pred_h = float(b1), float(b2), float(b3), float(b4)

        # calc the inner rect area
        dx = min(max(gt_x, gt_x+gt_w), max(pred_x, pred_x+pred_w)) - max(min(gt_x, gt_x+gt_w), min(pred_x, pred_x+pred_w))
        dy = min(max(gt_y, gt_y+gt_h), max(pred_y, pred_y+pred_h)) - max(min(gt_y, gt_y+gt_h), min(pred_y, pred_y+pred_h))
        if (dx >= 0) and (dy >= 0):
             unionArea = dx*dy

        if unionArea is None:
            print("NO UNION - BAD MATCH")

        iou = unionArea / (gt_w*gt_h + pred_w*pred_h - unionArea)
        # iou_list.append("%.2f" % iou)  # "%.2f" % 1.2399 returns "1.24"
        iou = "%.2f" % iou  # "%.2f" % 1.2399 returns "1.24"
        iou_list.append(float(iou))

        cv2.rectangle(pic, (int(gt_x), int(gt_y)), (int(gt_x+gt_w), int(gt_y+gt_h)), (0, 255, 0), 3)
        cv2.rectangle(pic, (int(pred_x), int(pred_y)), (int(pred_x+pred_w), int(pred_y+pred_h)), (0, 0, 255), 3)

        cv2.putText(pic, "IOU: {}".format(iou), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 3)
        cv2.putText(pic, "IOU: {}".format(iou), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 1)  # hollow text

        cv2.putText(pic, "Average IOU is: 0.83", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 3)
        cv2.putText(pic, "Average IOU is: 0.83", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)  # hollow text

        cv2.imshow('frame', pic)
        cv2.waitKey(0)

    print("Average IOU is: " + str("%.2f" % (sum(iou_list) / len(iou_list))))


if __name__ == "__main__":
    calc()


